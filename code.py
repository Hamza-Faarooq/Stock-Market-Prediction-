import requests
import pandas as pd
import numpy as np
from scipy import stats
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Function to fetch stock price data from Alpha Vantage
def fetch_stock_data(symbol, interval='daily', output_size='compact'):
    api_key = 'VBA2PDF6NUNEATFV'  
#Replace 'YOUR_API_KEY' with your actual Alpha Vantage API key
    url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=AAPL&outputsize=compact&apikey=VBA2PDF6NUNEATFV'
    response = requests.get(url)
    data = response.json()
    if 'Time Series (Daily)' in data:
        df = pd.DataFrame(data['Time Series (Daily)']).T
        df.index = pd.to_datetime(df.index)
        df = df.astype(float)
        return df
    else:
        print('Data not available.')
        print(data)  # Print the data response for debugging
        return None

# Example: Fetching stock data for Apple (AAPL)
print("Fetching data...")
stock_data = fetch_stock_data('AAPL')

if stock_data is not None:
    print("Data fetched successfully.")
    # Renaming columns for ease of use
    stock_data.columns = ['open', 'high', 'low', 'close', 'volume']
    
    # Check the first few rows of the data
    print("Initial Stock Data:")
    print(stock_data.head())

    # Step 2: Data Preprocessing
    # Remove missing values
    stock_data.dropna(inplace=True)
    
    # Check if data is still available after removing missing values
    print("After Dropping Missing Values:")
    print(stock_data.head())
    print(stock_data.shape)

    # Check for outliers and remove if necessary
    # Example: Remove outliers using z-score
    z_scores = stats.zscore(stock_data)
    abs_z_scores = np.abs(z_scores)
    filtered_entries = (abs_z_scores < 3).all(axis=1)
    stock_data = stock_data[filtered_entries]
    
    # Check if data is still available after removing outliers
    print("After Removing Outliers:")
    print(stock_data.head())
    print(stock_data.shape)

    # Step 3: Feature Engineering
    # Calculate moving averages
    stock_data['MA_50'] = stock_data['close'].rolling(window=50).mean()
    stock_data['MA_200'] = stock_data['close'].rolling(window=200).mean()

    # Calculate RSI
    delta = stock_data['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    stock_data['RSI'] = rsi

    # Drop NaN values generated by rolling calculations
    stock_data.dropna(inplace=True)

    # Check final prepared data
    print("Final Prepared Data:")
    print(stock_data.head())
    print(stock_data.shape)

    # Define features and target variable
    X = stock_data[['MA_50', 'MA_200', 'RSI']]
    y = stock_data['close']
    
    # Ensure there is data available for splitting
    if X.shape[0] == 0 or y.shape[0] == 0:
        print("No data available after preprocessing.")
    else:
        # Split data into training and testing sets
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Initialize and train models
        lr_model = LinearRegression()
        rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
        
        lr_model.fit(X_train, y_train)
        rf_model.fit(X_train, y_train)

        # Make predictions
        lr_pred = lr_model.predict(X_test)
        rf_pred = rf_model.predict(X_test)

        # Evaluate models
        lr_mse = mean_squared_error(y_test, lr_pred)
        rf_mse = mean_squared_error(y_test, rf_pred)

        print('Linear Regression MSE:', lr_mse)
        print('Random Forest MSE:', rf_mse)

        # Calculate R-squared
        lr_r_squared = lr_model.score(X_test, y_test)
        rf_r_squared = rf_model.score(X_test, y_test)

        print('Linear Regression R-squared:', lr_r_squared)
        print('Random Forest R-squared:', rf_r_squared)

        # Step 6: Visualization
        # Plot actual vs. predicted prices
        plt.figure(figsize=(12, 6))
        plt.plot(y_test.index, y_test, label='Actual Prices')
        plt.plot(y_test.index, lr_pred, label='Linear Regression Predictions')
        plt.plot(y_test.index, rf_pred, label='Random Forest Predictions')
        plt.xlabel('Date')
        plt.ylabel('Stock Price')
        plt.title('Actual vs. Predicted Stock Prices')
        plt.legend()
        plt.show()

        # Visualize evaluation metrics
        models = ['Linear Regression', 'Random Forest']
        mse_scores = [lr_mse, rf_mse]
        r_squared_scores = [lr_r_squared, rf_r_squared]

        plt.figure(figsize=(10, 5))
        plt.bar(models, mse_scores, color=['blue', 'green'])
        plt.xlabel('Model')
        plt.ylabel('Mean Squared Error')
        plt.title('Model Performance (Mean Squared Error)')
        plt.show()

        plt.figure(figsize=(10, 5))
        plt.bar(models, r_squared_scores, color=['blue', 'green'])
        plt.xlabel('Model')
        plt.ylabel('R-squared')
        plt.title('Model Performance (R-squared)')
        plt.show()
else:
    print('Failed to fetch stock data.')
